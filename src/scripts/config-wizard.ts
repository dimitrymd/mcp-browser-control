import inquirer from 'inquirer';
import fs from 'fs';
import axios from 'axios';

export async function runConfigWizard() {
  console.log('⚙️ Advanced Configuration Wizard for Revolutionary Platform\n');

  try {
    // Advanced configuration options
    const config = await inquirer.prompt([
      {
        type: 'input',
        name: 'googleApiKey',
        message: '🔑 Google PageSpeed Insights API Key:',
        default: process.env.GOOGLE_PAGESPEED_API_KEY || '',
        validate: (input: string) => {
          return input.length >= 10 || 'API key required (minimum 10 characters)';
        }
      },
      {
        type: 'checkbox',
        name: 'features',
        message: '🚀 Select revolutionary features to enable:',
        choices: [
          { name: '📊 SEO Intelligence Suite', value: 'seo', checked: true },
          { name: '🎥 Multimedia Testing', value: 'multimedia', checked: true },
          { name: '🔍 Keyword Intelligence', value: 'keywords', checked: true },
          { name: '⚡ Performance Analytics', value: 'performance', checked: true },
          { name: '🌐 Network Monitoring', value: 'network', checked: true },
          { name: '🎯 Competitive Intelligence', value: 'competitive', checked: true }
        ]
      },
      {
        type: 'list',
        name: 'serverMode',
        message: '🖥️  Server deployment mode:',
        choices: [
          { name: 'Development (Local testing)', value: 'development' },
          { name: 'Production (Enterprise deployment)', value: 'production' },
          { name: 'Professional Services (Client delivery)', value: 'professional' }
        ],
        default: 'development'
      },
      {
        type: 'number',
        name: 'maxSessions',
        message: '🔢 Maximum concurrent browser sessions:',
        default: 5,
        validate: (input: number) => {
          return (input >= 1 && input <= 20) || 'Must be between 1 and 20 sessions';
        }
      },
      {
        type: 'list',
        name: 'browserType',
        message: '🌐 Default browser preference:',
        choices: [
          { name: 'Chrome (Recommended)', value: 'chrome' },
          { name: 'Firefox', value: 'firefox' },
          { name: 'Safari (macOS only)', value: 'safari' },
          { name: 'Edge', value: 'edge' }
        ],
        default: 'chrome'
      },
      {
        type: 'confirm',
        name: 'headlessMode',
        message: '👻 Enable headless mode (recommended for servers)?',
        default: true
      },
      {
        type: 'list',
        name: 'logLevel',
        message: '📝 Logging level:',
        choices: ['error', 'warn', 'info', 'debug'],
        default: 'info'
      },
      {
        type: 'confirm',
        name: 'enableCaching',
        message: '💾 Enable result caching for performance?',
        default: true
      },
      {
        type: 'confirm',
        name: 'saveAdvancedConfig',
        message: '💾 Save advanced configuration?',
        default: true
      }
    ]);

    if (config.saveAdvancedConfig) {
      // Create comprehensive .env file
      const envContent = `# Revolutionary MCP Browser Control Server - Advanced Configuration
# Generated by config wizard on ${new Date().toISOString()}

# GOOGLE API CONFIGURATION
GOOGLE_PAGESPEED_API_KEY=${config.googleApiKey}

# FEATURE TOGGLES
ENABLE_SEO_FEATURES=${config.features.includes('seo')}
ENABLE_MULTIMEDIA_TESTING=${config.features.includes('multimedia')}
ENABLE_KEYWORD_INTELLIGENCE=${config.features.includes('keywords')}
ENABLE_PERFORMANCE_ANALYTICS=${config.features.includes('performance')}
ENABLE_NETWORK_MONITORING=${config.features.includes('network')}
ENABLE_COMPETITIVE_INTELLIGENCE=${config.features.includes('competitive')}

# SERVER CONFIGURATION
SERVER_MODE=${config.serverMode}
MAX_CONCURRENT_SESSIONS=${config.maxSessions}
DEFAULT_BROWSER=${config.browserType}
HEADLESS_MODE=${config.headlessMode}
LOG_LEVEL=${config.logLevel}
ENABLE_CACHING=${config.enableCaching}

# PERFORMANCE SETTINGS
PAGE_LOAD_TIMEOUT=30000
ELEMENT_TIMEOUT=10000
SCREENSHOT_QUALITY=80
BROWSER_TIMEOUT=60000

# ADVANCED SETTINGS (Professional Services)
# ENABLE_PDF_GENERATION=false
# ENABLE_PREMIUM_TEMPLATES=false
# CLIENT_BRANDING_PATH=./branding/
# REPORTS_OUTPUT_PATH=./browser-control/reports/

# SECURITY SETTINGS
SELENIUM_IMPLICIT_WAIT=10000
DISABLE_WEB_SECURITY=false
IGNORE_SSL_ERRORS=false

# MONITORING & ANALYTICS
ENABLE_PERFORMANCE_MONITORING=true
ENABLE_ERROR_TRACKING=true
METRICS_COLLECTION=true
`;

      fs.writeFileSync('.env', envContent);

      console.log('\n✅ Advanced configuration saved to .env');
      console.log('🎯 Revolutionary platform configured for optimal performance!');

      // Show feature summary
      console.log('\n🚀 Enabled Features:');
      config.features.forEach((feature: string) => {
        const featureNames = {
          seo: '📊 SEO Intelligence Suite',
          multimedia: '🎥 Multimedia Testing',
          keywords: '🔍 Keyword Intelligence',
          performance: '⚡ Performance Analytics',
          network: '🌐 Network Monitoring',
          competitive: '🎯 Competitive Intelligence'
        };
        console.log(`  ✅ ${featureNames[feature] || feature}`);
      });

      console.log('\n📋 Next Steps:');
      console.log('  mcp-browser-control test-config        # Validate setup');
      console.log('  mcp-browser-control start              # Start server');
      console.log('  mcp-browser-control analyze <url>      # Test analysis');

      console.log('\n💎 Revolutionary capabilities ready for professional use!');

    } else {
      console.log('\n⚠️  Configuration not saved. Run wizard again when ready.');
    }

  } catch (error) {
    console.log('\n❌ Configuration wizard failed:', error.message);
    console.log('🔧 Try simple setup: mcp-browser-control setup');
    console.log('📖 Documentation: GOOGLE-API-SETUP.md');
  }
}

// CLI entry point
if (import.meta.url === `file://${process.argv[1]}`) {
  runConfigWizard().catch(console.error);
}