import inquirer from 'inquirer';
import fs from 'fs';
import path from 'path';
import axios from 'axios';

export async function runSetup() {
  console.log('🚀 Revolutionary MCP Browser Control Server Setup\n');
  console.log('📋 Configure Google API key for SEO intelligence features...\n');

  try {
    const config = await inquirer.prompt([
      {
        type: 'input',
        name: 'googleApiKey',
        message: '🔑 Enter your Google PageSpeed Insights API Key:',
        validate: async (input: string) => {
          if (!input || input.length < 10) {
            return 'API key is required for SEO features (minimum 10 characters)';
          }

          // Test API key validity
          console.log('\n🧪 Testing API key...');
          try {
            const testUrl = 'https://www.googleapis.com/pagespeedonline/v5/runPagespeed';
            const response = await axios.get(testUrl, {
              params: {
                url: 'https://google.com',
                key: input,
                category: 'performance'
              },
              timeout: 10000
            });

            if (response.status === 200) {
              console.log('✅ API key validated successfully!\n');
              return true;
            } else {
              return 'API key validation failed. Please check your key.';
            }
          } catch (error) {
            if (error.response?.status === 403) {
              return 'Invalid API key. Please check your Google API key.';
            } else if (error.response?.status === 429) {
              console.log('⚠️  Rate limit reached, but API key appears valid.\n');
              return true;
            } else {
              console.log('⚠️  Could not validate API key (network issue), but proceeding...\n');
              return true;
            }
          }
        }
      },
      {
        type: 'confirm',
        name: 'enableSEO',
        message: '📊 Enable advanced SEO intelligence features?',
        default: true
      },
      {
        type: 'confirm',
        name: 'enableMultimedia',
        message: '🎥 Enable revolutionary multimedia testing?',
        default: true
      },
      {
        type: 'confirm',
        name: 'enableKeywordIntelligence',
        message: '🔍 Enable keyword intelligence and competitive analysis?',
        default: true
      },
      {
        type: 'list',
        name: 'logLevel',
        message: '📝 Select logging level:',
        choices: [
          { name: 'Info (Recommended)', value: 'info' },
          { name: 'Debug (Verbose)', value: 'debug' },
          { name: 'Warn (Minimal)', value: 'warn' },
          { name: 'Error (Critical only)', value: 'error' }
        ],
        default: 'info'
      },
      {
        type: 'list',
        name: 'browserMode',
        message: '🌐 Browser mode preference:',
        choices: [
          { name: 'Headless (Recommended for servers)', value: 'true' },
          { name: 'Visible (For development/testing)', value: 'false' }
        ],
        default: 'true'
      },
      {
        type: 'confirm',
        name: 'saveConfig',
        message: '💾 Save configuration to .env file?',
        default: true
      }
    ]);

    if (config.saveConfig) {
      // Create .env file
      const envContent = `# MCP Browser Control Server Configuration
# Generated by setup wizard on ${new Date().toISOString()}

# REQUIRED: Google API Key for SEO Intelligence
GOOGLE_PAGESPEED_API_KEY=${config.googleApiKey}

# Feature Toggles
ENABLE_SEO_FEATURES=${config.enableSEO}
ENABLE_MULTIMEDIA_TESTING=${config.enableMultimedia}
ENABLE_KEYWORD_INTELLIGENCE=${config.enableKeywordIntelligence}

# Server Configuration
LOG_LEVEL=${config.logLevel}
HEADLESS_MODE=${config.browserMode}
SERVER_PORT=3000
MAX_CONCURRENT_SESSIONS=5

# Optional: Premium Features (Professional License Required)
# ENABLE_PDF_GENERATION=false
# ENABLE_PREMIUM_TEMPLATES=false

# Browser Configuration
DEFAULT_BROWSER=chrome
BROWSER_TIMEOUT=30000
SELENIUM_IMPLICIT_WAIT=10000

# Performance Settings
SCREENSHOT_QUALITY=80
PAGE_LOAD_TIMEOUT=30000
ELEMENT_TIMEOUT=10000
`;

      fs.writeFileSync('.env', envContent);

      console.log('\n✅ Configuration saved to .env');
      console.log('🎯 Revolutionary SEO intelligence ready!');

      // Show next steps
      console.log('\n📋 Next Steps:');
      console.log('  mcp-browser-control start              # Start the server');
      console.log('  mcp-browser-control test-config        # Test your setup');
      console.log('  mcp-browser-control analyze <url>      # Quick analysis demo');
      console.log('\n📖 Documentation:');
      console.log('  GOOGLE-API-SETUP.md    # Complete setup guide');
      console.log('  README.md              # Platform documentation');
      console.log('  PDF-INTEGRATION.md     # Premium features guide');

      console.log('\n🚀 Revolutionary platform configured successfully!');
      console.log('💎 Ready to deliver €35,000+ SEO intelligence analysis!');

    } else {
      console.log('\n⚠️  Configuration not saved. Run setup again when ready.');
    }

  } catch (error) {
    console.log('\n❌ Setup failed:', error.message);
    console.log('📖 Check GOOGLE-API-SETUP.md for manual configuration.');
    console.log('💼 Support: dimitrymd@gmail.com');
  }
}

// CLI entry point
if (import.meta.url === `file://${process.argv[1]}`) {
  runSetup().catch(console.error);
}