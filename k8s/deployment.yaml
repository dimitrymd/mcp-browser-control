apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-browser-control
  labels:
    app: mcp-browser-control
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: mcp-browser-control
  template:
    metadata:
      labels:
        app: mcp-browser-control
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mcp-browser-control
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
      - name: init-check
        image: mcp-browser-control:latest
        command: ['sh', '-c']
        args:
        - |
          echo "üîç Performing pre-flight checks..."
          node -e "
            console.log('Node.js version:', process.version);
            console.log('Platform:', process.platform);
            console.log('Architecture:', process.arch);
            console.log('Memory:', Math.round(process.memoryUsage().rss / 1024 / 1024), 'MB');
          "
          echo "‚úÖ Pre-flight checks complete"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      containers:
      - name: mcp-browser-control
        image: mcp-browser-control:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        - containerPort: 9222
          name: chrome-debug
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: BROWSER_TYPE
          value: "chrome"
        - name: HEADLESS
          value: "true"
        - name: MAX_CONCURRENT_SESSIONS
          valueFrom:
            configMapKeyRef:
              name: mcp-config
              key: max-sessions
        - name: SESSION_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: mcp-config
              key: session-timeout
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: mcp-config
              key: log-level
        - name: REDIS_URL
          value: "redis://redis:6379"
        - name: PROMETHEUS_ENABLED
          value: "true"
        - name: AUTH_ENABLED
          valueFrom:
            configMapKeyRef:
              name: mcp-config
              key: auth-enabled
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: mcp-secrets
              key: jwt-secret
        - name: API_KEYS
          valueFrom:
            secretKeyRef:
              name: mcp-secrets
              key: api-keys
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health/live
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/startup
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: cache
          mountPath: /app/cache
        - name: shm
          mountPath: /dev/shm
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false # Chrome needs write access
      volumes:
      - name: logs
        emptyDir: {}
      - name: cache
        emptyDir: {}
      - name: shm
        emptyDir:
          medium: Memory
          sizeLimit: 2Gi
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
      - key: node.kubernetes.io/unreachable
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - mcp-browser-control
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: mcp-browser-control
  labels:
    app: mcp-browser-control
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  - port: 9222
    targetPort: 9222
    protocol: TCP
    name: chrome-debug
  selector:
    app: mcp-browser-control

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mcp-config
data:
  max-sessions: "10"
  session-timeout: "600000"
  log-level: "info"
  auth-enabled: "true"
  cache-enabled: "true"
  metrics-enabled: "true"

---
apiVersion: v1
kind: Secret
metadata:
  name: mcp-secrets
type: Opaque
data:
  # Base64 encoded values - replace with actual secrets
  jwt-secret: "your-jwt-secret-base64-encoded"
  api-keys: "your-api-keys-json-base64-encoded"

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mcp-browser-control
automountServiceAccountToken: false

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mcp-browser-control-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mcp-browser-control
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mcp-browser-control-pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: mcp-browser-control

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mcp-browser-control-netpol
spec:
  podSelector:
    matchLabels:
      app: mcp-browser-control
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app: nginx-ingress
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53  # DNS
    - protocol: UDP
      port: 53  # DNS
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 80   # HTTP
    - protocol: TCP
      port: 443  # HTTPS